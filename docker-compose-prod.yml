version: "3"

services:
  rabbit:
    image: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=rabbit
      - RABBITMQ_DEFAULT_PASS=rabbit
    ports:
      - "5672:5672"
      - "15672:15672"

  cache:
    image: memcached
    ports:
      - "11211:11211"
    entrypoint:
      - memcached
      - -m 64
    networks:
      - app-network

  db:
    image: postgres
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      - cache
      - rabbit
    networks:
      - app-network

  backend:
    platform: linux/amd64
    image: colinho99/short-url-backend
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - RABBITMQ_DEFAULT_USER=rabbit
      - RABBITMQ_DEFAULT_PASS=rabbit
    command: sh -c "python3 manage.py migrate && celery -A backend worker -l info --detach && gunicorn backend.wsgi --bind 0.0.0.0:8000"
    links:
      - db:db
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    platform: linux/amd64
    image: colinho99/short-url-frontend
    build: ./frontend
    volumes:
      - frontend:/app/frontend/build
    depends_on:
      - backend
    command: npm run build
    networks:
      - app-network

  nginx:
    platform: linux/amd64
    image: colinho99/short-url-proxy
    build: ./nginx
    ports:
      - "80:80"
    volumes:
      - frontend:/var/www/frontend
    depends_on:
      - frontend
    networks:
      - app-network

volumes:
  frontend:
  db-data:


networks:
  app-network:
    driver: bridge
